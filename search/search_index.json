{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Plataformas, Took For You APIs","text":"Info <p>Carga Hor\u00e1ria: 80</p> <p>Semestre: 3\u00ba per\u00edodo</p>"},{"location":"#ementa","title":"Ementa","text":"<p>A API desenvolvida em Spring Boot oferece uma s\u00e9rie de funcionalidades para gerenciamento de jogadores do jogo Valorant. Entre as principais funcionalidades, destacam-se a obten\u00e7\u00e3o do percentual de vit\u00f3ria dos jogadores atrav\u00e9s da rota \"/jogador/porcen-vitoria\", permitindo aos usu\u00e1rios visualizar de forma r\u00e1pida e eficiente o desempenho de cada jogador em suas partidas. Al\u00e9m disso, h\u00e1 a funcionalidade para obten\u00e7\u00e3o do percentual de vit\u00f3ria por agente, acess\u00edvel pela rota \"/jogador/porcenVitAgent\", fornecendo informa\u00e7\u00f5es detalhadas sobre os agentes mais utilizados e seus respectivos percentuais de vit\u00f3ria.</p>"},{"location":"#objetivos","title":"Objetivos","text":"<p>Ao final da disciplina o aluno ser\u00e1 capaz de:</p> <ol> <li>Tomar decis\u00f5es a respeito da escolha de estrat\u00e9gias de arquiteturas para o emprego de problemas computacionais;</li> <li>Implementar e interconectar aplica\u00e7\u00f5es computacionais para a constru\u00e7\u00e3o de plataformas de alto desempenho: escalabilidade por meio do uso de t\u00e9cnicas de computa\u00e7\u00e3o;</li> <li>Administrar um sistema de gerenciamento de rotas, provisionando a infraestrutura necess\u00e1ria como um servi\u00e7o;</li> <li>Construir, com o aux\u00edlio de frameworks, solu\u00e7\u00f5es de plataformas completas e integradas de forma profissional;</li> <li>Arquitetar e implementar linhas de produ\u00e7\u00f5es de softwares robustos (CI/CD);</li> <li>Analisar, projetar e especificar uma solu\u00e7\u00e3o de computa\u00e7\u00e3o em nuvem mista baseada em hardware, software e redes para atender aos requisitos de determinado pacto de n\u00edvel de servi\u00e7o (SLA);</li> <li>Planejar e analisar o uso de plataformas empresariais como subs\u00eddio para cria\u00e7\u00e3o de novos neg\u00f3cios (PaaS).</li> </ol>"},{"location":"#conteudo-programatico","title":"Conte\u00fado Program\u00e1tico","text":"<ol> <li>Breve vis\u00e3o geral da API desenvolvida para gerenciamento de jogadores do jogo Valorant;</li> <li>Rota para obter dados de um jogador espec\u00edfico;</li> <li>Rota para obter todos os jogadores cadastrados.;</li> <li>Rota para calcular o percentual de vit\u00f3ria de cada jogador;</li> <li>Rota para identificar jogadores com percentual de headshot acima de 30%;</li> <li>Rota para obten\u00e7\u00e3o do percentual de vit\u00f3ria por agente utilizado;</li> <li>Rota para visualizar o n\u00famero total de jogadores cadastrados;</li> <li>Rota para visualizar detalhes de um jogador espec\u00edfico;</li> <li>Redes Definidas por Software;</li> <li>Software como um Servi\u00e7o;</li> <li>Gest\u00e3o de N\u00edveis de Servi\u00e7o.</li> </ol>"},{"location":"#bibliografia-basica","title":"Bibliografia B\u00e1sica","text":"<p>Livros:</p> <ol> <li> <p>ROMAN, Ed; AMBLER, Scott W.; JEWELL, Tyler. Dominando Enterprise Javabeans. Porto Alegre: Bookman, 2004. E-book. ISBN 9788577804061. Dispon\u00edvel em: https://integrada.minhabiblioteca.com.br/#/books/9788577804061. Acesso em: 30 de maio de 2023.</p> </li> <li> <p>ALVES, William Pereira. Java para Web - Desenvolvimento de Aplica\u00e7\u00f5es. S\u00e3o Paulo: \u00c9rica, 2015. E-book. ISBN 9788536519357. Dispon\u00edvel em: https://integrada.minhabiblioteca.com.br/#/books/9788536519357. Acesso em: 30 de maio de 2023.</p> </li> <li> <p>FREEMAN, Emily. DevOps Para Leigos. Rio de Janeiro: Editora Alta Books, 2021. E-book. ISBN 9788550816661. Dispon\u00edvel em: https://integrada.minhabiblioteca.com.br/#/books/9788550816661. Acesso em: 30 de maio de 2023.</p> </li> </ol>"},{"location":"#bibliografia-complementar","title":"Bibliografia Complementar","text":"<p>Livros:</p> <ol> <li> <p>XU, A., System Design Interview - An insider's guide, 1\u00aa ed., Independently Published, 2020.</p> </li> <li> <p>MARTIN, R. C., Arquitetura Limpa: o guia do artes\u00e3o para estrutura e design de software, 1\u00aa ed., Alta Books, 2018.</p> </li> <li> <p>PARKER, G. G.; VAN ALSTYNE, M. W.; CHOUDARY, S. P., Plataforma: a revolu\u00e7\u00e3o da estrat\u00e9gia, 1\u00aa ed., Alta Books, 2018.</p> </li> <li> <p>SEHGAL, N. K.; BHATT, P. C. P.; ACKEN J. M., Cloud Computing with Security and Scalability.: Concepts and Practices, 3\u00aa ed., Springer, 2023.</p> </li> <li> <p>KRIEF, M., Learning DevOps: A comprehensive guide to accelerating DevOps culture adoption with Terraform, Azure DevOps, Kubernetes, and Jenkins, 2\u00aa ed., Packt Publishing, 2022.</p> </li> <li> <p>GAMMA, E.; HELM, R.; JOHNSON, R., VLISSIDES, J., Design Patterns: Elements of Reusable Object-Oriented Software, 1\u00aa ed., Addison-Wesley Professional, 1994.</p> </li> <li> <p>SANTANA, E. F. Z., Back-end Java: Microsservi\u00e7os, Spring Boot e Kubernetes, Casa do C\u00f3digo, 2021. Material.</p> </li> <li> <p>SANTANA, E. F. Z., Apache Kafka e Spring Boot: Comunica\u00e7\u00e3o ass\u00edncrona entre microsservi\u00e7os, Casa do C\u00f3digo, 2022. Material.</p> </li> </ol> <p>Artigos:</p> <ul> <li> <p>XU, A. et al.. ByteByteGo - System Design 101. Dispon\u00edvel em: https://github.com/ByteByteGoHq/system-design-101. Acesso em: 19 dezembro 2023.</p> </li> <li> <p>Spring. Spring Cloud. Dispon\u00edvel em: https://spring.io/projects/spring-cloud. Acesso em: 19 dezembro 2023.</p> </li> <li> <p>CHOI, K., Software Engineering Blogs. Dispon\u00edvel em: https://github.com/kilimchoi/engineering-blogs. Acesso em: 20 dezembro 2023.</p> </li> <li> <p>Ghemawat, S. et al.. Towards Modern Development of Cloud Applications.  Proceedings of the 19th Workshop on Hot Topics in Operating Systems, 2023 - p. 110-117. Association for Computing Machinery, Providence, RI, USA. Dispon\u00edvel em: doi:10.1145/3593856.3595909. Acesso em: 05 fevereiro de 2024.</p> </li> </ul>"},{"location":"disclaimer/","title":"Disclaimer","text":""},{"location":"disclaimer/#contributors","title":"Contributors","text":"Name Alex Macedo D\u00e9bora Duarte Henrique Sardella Thiago Hil\u00e1rio Rafa Ambrosio"},{"location":"disclaimer/#source","title":"Source","text":"<p>Circa of 70% of the whole conceptual texts were generated by ChatGPT nonetheless all of them were revised by the editor. The sections of handout was produced by the contributors.</p>"},{"location":"Come%C3%A7ar/2024.1/","title":"2024.1","text":"Info <p>Integrantes: Alex Macedo, D\u00e9bora Duarte, Henrique Sardella, Rafa Ambrosio, Thiago Hilario</p> <p>Backend: https://github.com/Alexxmfs/Backend_Vava Docker: https://github.com/henrique-sdc/Docker_Valorant Scrape: https://github.com/Alexxmfs/Scrape_Valorant Frontend: https://github.com/Alexxmfs/Dashboard_Valorant</p>"},{"location":"Come%C3%A7ar/2024.1/#roteiro-para-rodar-nosso-projeto","title":"Roteiro para Rodar nosso Projeto","text":"BackendDockerScrapFrontend"},{"location":"Come%C3%A7ar/2024.1/#_1","title":"2024.1","text":""},{"location":"Come%C3%A7ar/2024.1/#backend","title":"Backend","text":"<p>Clonando Reposit\u00f3rio Backend</p> <p>Este reposit\u00f3rio cont\u00e9m o c\u00f3digo-fonte da api desenvolvida para dados de jogadores do jogo Valorant. Para clonar o reposit\u00f3rio e configurar o backend localmente, siga os passos abaixo:</p> <p>Clone esse reposit\u00f3rio:</p> <pre><code>https://github.com/Alexxmfs/Backend_Vava.git\n</code></pre> <ol> <li> <p>Abrindo o reposit\u00f3rio:</p> <p>Navegue at\u00e9 o diret\u00f3rio do projeto clonado:</p> <pre><code>cd Backend_Vava\n</code></pre> <p>Abrir a IDE Visual Studio Code atrav\u00e9s</p> <pre><code>cd code .\n</code></pre> <p>\u00c9 preciso abrir o seguinte diret\u00f3rio \"src/main/resources/application.properties\"</p> <pre><code>spring.datasource.url=jdbc:postgresql://localhost:5432/vava\nspring.datasource.username=vava\nspring.datasource.password=vava\n</code></pre> <p>Configure com o usu\u00e1rio e senha do seu banco de dados e o nome do banco de dados </p> </li> </ol>"},{"location":"Come%C3%A7ar/2024.1/#_2","title":"2024.1","text":"<p>Ap\u00f3s isso execute estes comando no CMD da pasta:</p> <pre><code>mvn clean\n\nmvn package\n\nmvn spring-boot:run\n</code></pre> <p>Verifique a vers\u00e3o do projeto, pois estamos utilizando a vers\u00e3o do jdk 17</p>"},{"location":"Come%C3%A7ar/2024.1/#_3","title":"2024.1","text":""},{"location":"Come%C3%A7ar/2024.1/#conteiner-do-docker","title":"Cont\u00eainer do Docker","text":"Importante <p>Antes de fazer esse procedimento \u00e9 preciso j\u00e1 ter clonado o Backend e rodado o comando: mvn clean package</p> <p>O primeiro passo para voc\u00ea testar o nosso projeto \u00e9 baixar o aplicativo desktop Docker:</p> <p>https://www.docker.com/products/docker-desktop/</p> <p>Ap\u00f3s a instala\u00e7\u00e3o do Docker clone o reposit\u00f3rio:</p> <pre><code>https://github.com/henrique-sdc/Docker_Valorant.git\n</code></pre> <p>Abrindo o Reposit\u00f3rio:</p> <p>Navegue at\u00e9 o diret\u00f3rio do projeto clonado:</p> <pre><code>cd Docker_Valorant\n</code></pre> <p>Abrir a IDE Visual Studio Code atrav\u00e9s:</p> <pre><code>cd code .\n</code></pre> <p>Abra o terminal CMD e execute o comando:</p> <pre><code>docker compose up -d --build --force-recreate\n</code></pre> <p>Feito isso voc\u00ea ter\u00e1 criado um cont\u00eainer no Docker onde estar\u00e1 nosso banco de dados.</p> <p>\u00c9 preciso abrir o pgAdmin caso n\u00e3o tenha instalado instale PostgreSQL depois de ter instalado abre o pgAdmin crie um banco de dados vava, ap\u00f3s isso cole este comando no terminal SQL para criar nosso banco:</p> <pre><code>    CREATE TABLE jogadores (\n    id SERIAL PRIMARY KEY,\n    Username VARCHAR(255),\n    Tag VARCHAR(255),\n    Url TEXT,\n    DpR NUMERIC,\n    Kdr NUMERIC,\n    Headshot NUMERIC,\n    Win NUMERIC,\n    Wins NUMERIC,\n    KAST NUMERIC,\n    DDdeltaR NUMERIC,\n    Kills NUMERIC,\n    Deaths NUMERIC,\n    Assists NUMERIC,\n    ACS NUMERIC,\n    kad_ratio NUMERIC,\n    kills_per_round NUMERIC,\n    Clutch1v1s NUMERIC,\n    flawless_rounds NUMERIC,\n    current_rating NUMERIC,\n    peak_rating NUMERIC,\n    Playtime NUMERIC,\n    Matches NUMERIC,\n    Level NUMERIC,\n    Losses NUMERIC,\n    top_agent1 VARCHAR(255),\n    top_agent2 VARCHAR(255),\n    top_agent3 VARCHAR(255),\n    top_hours_agent1 NUMERIC,\n    top_hours_agent2 NUMERIC,\n    top_hours_agent3 NUMERIC,\n    top_matches_agent1 NUMERIC,\n    top_matches_agent2 NUMERIC,\n    top_matches_agent3 NUMERIC,\n    top_win_agent1 NUMERIC,\n    top_win_agent2 NUMERIC,\n    top_win_agent3 NUMERIC,\n    TopKDAgent1 NUMERIC,\n    TopKDAgent2 NUMERIC,\n    TopKDAgent3 NUMERIC,\n    top_weapon1 VARCHAR(255),\n    top_weapon_headshot1 NUMERIC,\n    top_weapon_bodyshot1 NUMERIC,\n    top_weapon_legshot1 NUMERIC,\n    top_weapon_kills1 NUMERIC,\n    top_weapon2 VARCHAR(255),\n    top_weapon_headshot2 NUMERIC,\n    top_weapon_bodyshot2 NUMERIC,\n    top_weapon_legshot2 NUMERIC,\n    top_weapon_kills2 NUMERIC,\n    top_weapon3 VARCHAR(255),\n    top_weapon_headshot3 NUMERIC,\n    top_weapon_bodyshot3 NUMERIC,\n    top_weapon_legshot3 NUMERIC,\n    top_weapon_kills3 NUMERIC,\n    top_map1 VARCHAR(255),\n    top_map_winrate1 NUMERIC,\n    top_map_wins1 NUMERIC,\n    top_map_losses1 NUMERIC,\n    top_map2 VARCHAR(255),\n    top_map_winrate2 NUMERIC,\n    top_map_wins2 NUMERIC,\n    top_map_losses2 NUMERIC,\n    top_map3 VARCHAR(255),\n    top_map_winrate3 NUMERIC,\n    top_map_wins3 NUMERIC,\n    top_map_losses3 NUMERIC,\n    top_map4 VARCHAR(255),\n    top_map_winrate4 NUMERIC,\n    top_map_wins4 NUMERIC,\n    top_map_losses4 NUMERIC,\n    top_map5 VARCHAR(255),\n    top_map_winrate5 NUMERIC,\n    top_map_wins5 NUMERIC,\n    top_map_losses5 NUMERIC,\n    top_map6 VARCHAR(255),\n    top_map_winrate6 NUMERIC,\n    top_map_wins6 NUMERIC,\n    top_map_losses6 NUMERIC,\n    top_map7 VARCHAR(255),\n    top_map_winrate7 NUMERIC,\n    top_map_wins7 NUMERIC,\n    top_map_losses7 NUMERIC,\n    top_map8 VARCHAR(255),\n    top_map_winrate8 NUMERIC,\n    top_map_wins8 NUMERIC,\n    top_map_losses8 NUMERIC,\n    top_map9 VARCHAR(255),\n    top_map_winrate9 NUMERIC,\n    top_map_wins9 NUMERIC,\n    top_map_losses9 NUMERIC,\n    top_map10 VARCHAR(255),\n    top_map_winrate10 NUMERIC,\n    top_map_wins10 NUMERIC,\n    top_map_losses10 NUMERIC,\n    Views NUMERIC,\n    rank VARCHAR(255)\n    );\n</code></pre> Importante <p>Toda vez que voc\u00ea for usar nosso sistema \u00e9 preciso verificar se o Docker est\u00e1 ligado.</p>"},{"location":"Come%C3%A7ar/2024.1/#_4","title":"2024.1","text":""},{"location":"Come%C3%A7ar/2024.1/#raspagem","title":"Raspagem","text":"Importante <p>Antes de fazer esse procedimento \u00e9 preciso estar com o backend rodando e o docker tamb\u00e9m com a tabela de jogadores j\u00e1 criada no pgAdmin.</p> <p>Clonando Reposit\u00f3rio Backend</p> <pre><code>https://github.com/Alexxmfs/Scrape_Valorant.git\n</code></pre> <p>Navegue at\u00e9 o diret\u00f3rio do projeto clonado:</p> <pre><code>cd Scrape_Valorant\n</code></pre> <p>Abrir a IDE Visual Studio Code atrav\u00e9s</p> <pre><code>cd code .\n</code></pre> <p>Comece a raspar</p> <pre><code>python main.py\n</code></pre>"},{"location":"Come%C3%A7ar/2024.1/#_5","title":"2024.1","text":""},{"location":"Come%C3%A7ar/2024.1/#frontend","title":"Frontend","text":"Importante <p>Antes de fazer esse procedimento \u00e9 preciso que o Docker e o Backend estejam rodando com a tabela de jogadores criada e o mais IMPORTANTE, \u00e9 necess\u00e1rio j\u00e1 ter raspado alguns jogadores com o arquivo Scrape.</p> <p>Sugest\u00e3o de Roteiros</p> <ol> <li> <p>Clonando o Reposit\u00f3rio do Dashboard Valorant</p> <p>Este reposit\u00f3rio cont\u00e9m o c\u00f3digo-fonte de um dashboard desenvolvido para an\u00e1lise de dados de jogadores do jogo Valorant. Para clonar o reposit\u00f3rio e configurar o frontend localmente, siga os passos abaixo:</p> <pre><code>https://github.com/Alexxmfs/Dashboard_Valorant.git\n</code></pre> </li> <li> <p>Clonando o Reposit\u00f3rio:</p> <p>Navegue at\u00e9 o diret\u00f3rio do projeto clonado:</p> <pre><code>cd Dashboard_Valorant\n</code></pre> <p>Abrir a IDE Visual Studio Code atrav\u00e9s</p> <pre><code>cd code .\n</code></pre> <p>Instale as depend\u00eancias do projeto usando npm (Node Package Manager) no Visula Studio Code</p> <pre><code>npm install\n</code></pre> <p>\u00c9 preciso digitar o comando abaixo para compilar o c\u00f3digo para javascript caso haja erro e necess\u00e1rio instalar o typescript</p> <pre><code>tsc\n</code></pre> <p>\u00c9 preciso dar o comando abaixo para iniciar o projeto frontend:</p> <pre><code>npm start\n</code></pre> </li> </ol>"},{"location":"Docker/documentation/","title":"Documentation","text":""},{"location":"Docker/documentation/#swagger","title":"Swagger","text":"mavengradle <pre><code>&lt;dependency&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>\n</code></pre> <p>```javascript I'm A tab console.log('Code Tab A'); <pre><code>```javascript I'm tab B\nconsole.log('Code Tab B');\n</code></pre></p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <p>https://www.baeldung.com/spring-rest-openapi-documentation</p>"},{"location":"Docker/spring-boot-cloud/","title":"Cont\u00eainer do Docker","text":"Importante <p>Antes de fazer esse procedimento \u00e9 preciso j\u00e1 ter clonado o Backend e rodado o comando: mvn clean package</p> <p>O primeiro passo para voc\u00ea testar o nosso projeto \u00e9 baixar o aplicativo desktop Docker:</p> <p>https://www.docker.com/products/docker-desktop/</p> <p>Ap\u00f3s a instala\u00e7\u00e3o do Docker clone o reposit\u00f3rio:</p> <pre><code>https://github.com/henrique-sdc/Docker_Valorant.git\n</code></pre> <p>Abrindo o Reposit\u00f3rio:</p> <p>Navegue at\u00e9 o diret\u00f3rio do projeto clonado:</p> <pre><code>cd Docker_Valorant\n</code></pre> <p>Abrir a IDE Visual Studio Code atrav\u00e9s:</p> <pre><code>cd code .\n</code></pre> <p>Abra o terminal CMD e execute o comando:</p> <pre><code>docker compose up -d --build --force-recreate\n</code></pre> <p>Feito isso voc\u00ea ter\u00e1 criado um cont\u00eainer no Docker onde estar\u00e1 nosso banco de dados.</p> <p>\u00c9 preciso abrir o pgAdmin caso n\u00e3o tenha instalado instale PostgreSQL depois de ter instalado abre o pgAdmin crie um banco de dados vava, ap\u00f3s isso cole este comando no terminal SQL para criar nosso banco:</p> <pre><code>    CREATE TABLE jogadores (\n    id SERIAL PRIMARY KEY,\n    Username VARCHAR(255),\n    Tag VARCHAR(255),\n    Url TEXT,\n    DpR NUMERIC,\n    Kdr NUMERIC,\n    Headshot NUMERIC,\n    Win NUMERIC,\n    Wins NUMERIC,\n    KAST NUMERIC,\n    DDdeltaR NUMERIC,\n    Kills NUMERIC,\n    Deaths NUMERIC,\n    Assists NUMERIC,\n    ACS NUMERIC,\n    kad_ratio NUMERIC,\n    kills_per_round NUMERIC,\n    Clutch1v1s NUMERIC,\n    flawless_rounds NUMERIC,\n    current_rating NUMERIC,\n    peak_rating NUMERIC,\n    Playtime NUMERIC,\n    Matches NUMERIC,\n    Level NUMERIC,\n    Losses NUMERIC,\n    top_agent1 VARCHAR(255),\n    top_agent2 VARCHAR(255),\n    top_agent3 VARCHAR(255),\n    top_hours_agent1 NUMERIC,\n    top_hours_agent2 NUMERIC,\n    top_hours_agent3 NUMERIC,\n    top_matches_agent1 NUMERIC,\n    top_matches_agent2 NUMERIC,\n    top_matches_agent3 NUMERIC,\n    top_win_agent1 NUMERIC,\n    top_win_agent2 NUMERIC,\n    top_win_agent3 NUMERIC,\n    TopKDAgent1 NUMERIC,\n    TopKDAgent2 NUMERIC,\n    TopKDAgent3 NUMERIC,\n    top_weapon1 VARCHAR(255),\n    top_weapon_headshot1 NUMERIC,\n    top_weapon_bodyshot1 NUMERIC,\n    top_weapon_legshot1 NUMERIC,\n    top_weapon_kills1 NUMERIC,\n    top_weapon2 VARCHAR(255),\n    top_weapon_headshot2 NUMERIC,\n    top_weapon_bodyshot2 NUMERIC,\n    top_weapon_legshot2 NUMERIC,\n    top_weapon_kills2 NUMERIC,\n    top_weapon3 VARCHAR(255),\n    top_weapon_headshot3 NUMERIC,\n    top_weapon_bodyshot3 NUMERIC,\n    top_weapon_legshot3 NUMERIC,\n    top_weapon_kills3 NUMERIC,\n    top_map1 VARCHAR(255),\n    top_map_winrate1 NUMERIC,\n    top_map_wins1 NUMERIC,\n    top_map_losses1 NUMERIC,\n    top_map2 VARCHAR(255),\n    top_map_winrate2 NUMERIC,\n    top_map_wins2 NUMERIC,\n    top_map_losses2 NUMERIC,\n    top_map3 VARCHAR(255),\n    top_map_winrate3 NUMERIC,\n    top_map_wins3 NUMERIC,\n    top_map_losses3 NUMERIC,\n    top_map4 VARCHAR(255),\n    top_map_winrate4 NUMERIC,\n    top_map_wins4 NUMERIC,\n    top_map_losses4 NUMERIC,\n    top_map5 VARCHAR(255),\n    top_map_winrate5 NUMERIC,\n    top_map_wins5 NUMERIC,\n    top_map_losses5 NUMERIC,\n    top_map6 VARCHAR(255),\n    top_map_winrate6 NUMERIC,\n    top_map_wins6 NUMERIC,\n    top_map_losses6 NUMERIC,\n    top_map7 VARCHAR(255),\n    top_map_winrate7 NUMERIC,\n    top_map_wins7 NUMERIC,\n    top_map_losses7 NUMERIC,\n    top_map8 VARCHAR(255),\n    top_map_winrate8 NUMERIC,\n    top_map_wins8 NUMERIC,\n    top_map_losses8 NUMERIC,\n    top_map9 VARCHAR(255),\n    top_map_winrate9 NUMERIC,\n    top_map_wins9 NUMERIC,\n    top_map_losses9 NUMERIC,\n    top_map10 VARCHAR(255),\n    top_map_winrate10 NUMERIC,\n    top_map_wins10 NUMERIC,\n    top_map_losses10 NUMERIC,\n    Views NUMERIC,\n    rank VARCHAR(255)\n    );\n</code></pre> Importante <p>Toda vez que voc\u00ea for usar nosso sistema \u00e9 preciso verificar se o Docker est\u00e1 ligado.</p>"},{"location":"diagrama/devops/observability/","title":"Observability","text":""},{"location":"diagrama/devops/observability/#microservice","title":"Microservice","text":"pom.xml<pre><code>&lt;!-- metricas de uso --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- exporta no formato prometheus --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n    &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> application.yaml<pre><code>management:\n  endpoints:\n    web:\n      base-path: /gateway/actuator\n      exposure:\n        include: [ 'prometheus' ]\n</code></pre>"},{"location":"diagrama/devops/observability/#docker","title":"Docker","text":"docker-compose.yaml<pre><code>  prometheus:\n    image: prom/prometheus:latest\n    container_name: store-prometheus\n    ports:\n      - 9090:9090\n    volumes:\n      - $VOLUME/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml\n    networks:\n      - private-network\n\n  grafana:\n    container_name: store-grafana\n    image: grafana/grafana-enterprise\n    ports:\n      - 3000:3000\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n    volumes:\n      - $VOLUME/grafana:/var/lib/grafana\n      - $VOLUME/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources      \n    restart: always\n    networks:\n      - private-network\n</code></pre>"},{"location":"diagrama/devops/observability/#prometheus","title":"Prometheus","text":"$VOLUME/prometheus/prometheus.yml<pre><code>scrape_configs:\n\n  - job_name: 'GatewayMetrics'\n    metrics_path: '/gateway/actuator/prometheus'\n    scrape_interval: 1s\n    static_configs:\n      - targets:\n        - host.docker.internal:8443\n        labels:\n          application: 'Gateway Application'\n</code></pre> <p>http://localhost:9090/</p>"},{"location":"diagrama/devops/observability/#grafana","title":"Grafana","text":"$VOLUME/grafana/provisioning/datasources/datasourse.yml<pre><code>apiVersion: 1\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    access: proxy\n    url: http://prometheus:9090\n    isDefault: true\n</code></pre> <p>http://localhost:3000/</p> <ul> <li>Dashboard MarketPlace</li> </ul>"},{"location":"diagrama/microservices/auth/","title":"Auth","text":"<p>A fim do sistema possuir um controle de acesso, \u00e9 conveniente a cria\u00e7\u00e3o de um microsservi\u00e7o Auth, que ser\u00e1 respons\u00e1vel pelo cadastro de usu\u00e1rios do sistema.</p> <ol> <li>Endpoints</li> <li>Modulariza\u00e7\u00e3o<ul> <li>Interface</li> <li>Resource</li> </ul> </li> <li>Documenta\u00e7\u00e3o</li> <li>Integra\u00e7\u00e3o</li> <li>Token</li> <li>Docker</li> </ol>"},{"location":"diagrama/microservices/auth/#endpoints","title":"Endpoints","text":"Register <pre><code>POST /auth/register\n</code></pre> Autentica\u00e7\u00e3o :: Login <pre><code>POST /auth/login\n</code></pre>"},{"location":"diagrama/microservices/auth/#request","title":"Request","text":"<pre><code>{\n    \"name\": \"Antonio do Estudo\",\n    \"email\": \"acme@insper.edu.br\",\n    \"password\": \"123@321\"\n}\n</code></pre>"},{"location":"diagrama/microservices/auth/#response","title":"Response","text":"code body 201"},{"location":"diagrama/microservices/auth/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\nautonumber\nactor User\nUser-&gt;&gt;+Auth: register(RegisterIn)\nAuth-&gt;&gt;+Account: create(AccountIn)\nAccount-&gt;&gt;-Auth: returns the new account (AccountOut)\nAuth-&gt;&gt;-User: returns 201</code></pre>"},{"location":"diagrama/microservices/auth/#request_1","title":"Request","text":"<pre><code>{\n    \"email\": \"acme@insper.edu.br\",\n    \"password\": \"123@321\"\n}\n</code></pre>"},{"location":"diagrama/microservices/auth/#response_1","title":"Response","text":"code body 201 <code>{ \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0NWQxNjIwMS0xMmE0LTQ4YmYtOGM4NC1kZjc2OGZkYzQ4NzgiLCJuYW1lIjoiQW50b25pbyBkbyBFc3R1ZG8iLCJpYXQiOjE1MTYyMzkwMjIsInJvbGUiOiJyZWd1bGFyIn0.8eiTZjXGUFrseBP5J91UdDctw-Flp7HP-PAp1eO8f1M\" }</code> 403"},{"location":"diagrama/microservices/auth/#sequence-diagram_1","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\nautonumber\nactor User\nUser-&gt;&gt;+Auth: authenticate(CredentiaIn)\nAuth-&gt;&gt;+Account: login(LoginIn)\ncritical validated\n    Account-&gt;&gt;-Auth: returns the account\noption denied\n    Auth--&gt;&gt;User: unauthorized message\nend  \nAuth-&gt;&gt;Auth: generates a token\nAuth-&gt;&gt;-User: returns LoginOut\nUser-&gt;&gt;User: stores the token to use for the next requests</code></pre>"},{"location":"diagrama/microservices/auth/#modularizacao","title":"Modulariza\u00e7\u00e3o","text":"<p>Exemplo para o microsservi\u00e7o Auth.</p> <pre><code>classDiagram\n  namespace Interface {\n    class AuthController {\n      &lt;&lt;interface&gt;&gt;\n      register(RegisterIn)\n      authenticate(CredentialIn): LoginOut\n      solve(SolveIn): SolveOut\n    }\n    class RegisterIn {\n      &lt;&lt;record&gt;&gt;\n      String name\n      String email\n      String password\n    }\n    class CredentialIn {\n      &lt;&lt;record&gt;&gt;\n      String email\n      String password\n    }\n    class LoginOut {\n      &lt;&lt;Record&gt;&gt;\n      String token\n    }\n    class SolveIn {\n      &lt;&lt;Record&gt;&gt;\n      String token\n    }\n    class SolveOut {\n      &lt;&lt;Record&gt;&gt;\n      String id\n      String name\n      String role\n    }\n  }\n  namespace Resource {\n    class AuthResource {\n      &lt;&lt;REST API&gt;&gt;\n      -authService\n    }\n    class AuthService {\n      &lt;&lt;service&gt;&gt;\n      JwtService jwtService\n      register(RegisterIn)\n      authenticate(CredentialIn)\n    }\n    class JwtService {\n      &lt;&lt;service&gt;&gt;\n      String secretKey\n      String issuer\n      long duration\n      SecretKey key\n      JwtParser parser\n      init()\n      create(String id, String name, String role): String\n      getToken(String token): Token\n      getRole(String token): String\n    }\n    class Token {\n      &lt;&lt;record&gt;&gt;\n      String id\n      String name\n      String role\n    }\n  }\n  AuthController &lt;|-- AuthResource\n  AuthResource o-- AuthService\n  AuthService o-- JwtService</code></pre> <p>Exemplo de uma implementa\u00e7\u00e3o da interface AuthController.</p> AuthController.java<pre><code>package store.auth;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\n@FeignClient(\"store-auth\")\npublic interface AuthController {\n\n    @PostMapping(\"/auth/register\")\n    ResponseEntity&lt;?&gt; create (\n        @RequestBody(required = true) RegisterIn in\n    );\n\n    @PostMapping(\"/auth/login\")\n    ResponseEntity&lt;LoginOut&gt; authenticate (\n        @RequestBody(required = true) Credential in\n    );\n}\n</code></pre> <p>Repare que h\u00e1 a publica\u00e7\u00e3o da interface como sendo um servi\u00e7o a ser registrado no Discovery.</p>"},{"location":"diagrama/microservices/auth/#documentacao","title":"Documenta\u00e7\u00e3o","text":"<p>Para fazer a documenta\u00e7\u00e3o dos APIs, de forma automatizada, \u00e9 aconselh\u00e1vel a utiliza\u00e7\u00e3o da biblioteca <code>SpringDoc OpenAPI</code>.</p> pom.xml<pre><code>&lt;!-- https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springdoc&lt;/groupId&gt;\n  &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;\n  &lt;version&gt;[2.3.0,)&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"diagrama/microservices/auth/#integracao","title":"Integra\u00e7\u00e3o","text":"<p>A integra\u00e7\u00e3o entre os microsservi\u00e7os \u00e9 feita via OpenFeign. Esse framework precisa saber, quando a aplica\u00e7\u00e3o sobe, em quais pacotes ir\u00e1 procurar os servi\u00e7os. Para isso, se torna necess\u00e1rio anotar a classe <code>AuthApplication</code> com a lista de pacotes, assim bem como, anotar que esse microsservi\u00e7o ir\u00e1 trabalhar com a sistema de descoberta de microsservi\u00e7os habitado.</p> AuthApplication.java<pre><code>package store.auth;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients(basePackages = {\n    \"insper.store.account\"\n})\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class AuthApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AuthApplication.class, args);\n    }\n\n}\n</code></pre> <p>Necess\u00e1rio tamb\u00e9m atualizar o <code>pom.xml</code> para que o microsservi\u00e7o possa enxergar o outro microsservi\u00e7o.</p> <p>Note que esse microsservi\u00e7o possui depend\u00eancia de outro, o Account, al\u00e9m da depend\u00eancia da interface do pr\u00f3prio microsservi\u00e7o. Logo, se torna necess\u00e1rio explicitar essa depend\u00eancia no <code>pom.xml</code> do microsservi\u00e7o Auth.</p> pom.xml<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;insper.store&lt;/groupId&gt;\n  &lt;artifactId&gt;auth&lt;/artifactId&gt;\n  &lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;insper.store&lt;/groupId&gt;\n  &lt;artifactId&gt;account&lt;/artifactId&gt;\n  &lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n  &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;\n  &lt;version&gt;0.12.3&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n  &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;\n  &lt;version&gt;0.12.3&lt;/version&gt;\n  &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n  &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt; &lt;!-- or jjwt-gson if Gson is preferred --&gt;\n  &lt;version&gt;0.12.3&lt;/version&gt;\n  &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Aproveitando esse ponto, vale a pena j\u00e1 incluir tamb\u00e9m no <code>pom.xml</code>.</p>"},{"location":"diagrama/microservices/auth/#token","title":"Token","text":"<p>Para gerar o token de acesso, no caso JWT, um servi\u00e7o foi criado, <code>JwtService.java</code>.</p> <p>Para gerar o JWT, alguns atributos s\u00e3o adicionados no <code>application.yaml</code>.</p> application.yaml<pre><code>store:\n  jwt:\n    issuer: \"In5pEr\"\n    secretKey: \"\"\n    duration: 31536000000 # 365 days in miliseconds\n</code></pre> JwtService.java<pre><code>package store.auth;\n\nimport java.util.Date;\n\nimport javax.crypto.SecretKey;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.ExpiredJwtException;\nimport io.jsonwebtoken.JwtParser;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.io.Decoders;\nimport io.jsonwebtoken.security.Keys;\nimport jakarta.annotation.PostConstruct;\n\n@Service\npublic class JwtService {\n\n    @Value(\"${store.jwt.secret-key}\")\n    private String secretKey;\n\n    @Value(\"${store.jwt.issuer}\")\n    private String issuer;\n\n    @Value(\"${store.jwt.duration}\")\n    private long duration = 1l;\n\n    private SecretKey key;\n    private JwtParser parser;\n\n    @PostConstruct\n    public void init() {\n        this.key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(secretKey));\n        this.parser = Jwts.parser().verifyWith(key).build();\n    }\n\n    public String create(String id, String name, String role) {\n        String jwt = Jwts.builder()\n            .header()\n            .and()\n            .id(id)\n            .issuer(issuer)\n            .subject(name)\n            .signWith(key)\n            .claim(\"role\", role)\n            .notBefore(new Date())\n            .expiration(new Date(new Date().getTime() + duration))\n            .compact();\n        return jwt;\n    }\n\n    public String getToken(String token) {\n        final Claims claims = resolveClaims(token);\n        return Token.builder\n            .id(claims.getId())\n            .role(claims.get(\"role\", String.class))\n            .build();\n    }\n\n    private Claims resolveClaims(String token) {\n        if (token == null) throw new io.jsonwebtoken.MalformedJwtException(\"token is null\");\n        return validateClaims(parser.parseSignedClaims(token).getPayload());\n    }\n\n    private Claims validateClaims(Claims claims) throws ExpiredJwtException {\n        if (claims.getExpiration().before(new Date())) throw new ExpiredJwtException(null, claims, issuer);\n        if (claims.getNotBefore().after(new Date())) throw new ExpiredJwtException(null, claims, issuer);\n        return claims;\n    }\n\n}\n</code></pre>"},{"location":"diagrama/microservices/auth/#docker","title":"Docker","text":"<p>Adicione no <code>docker-compose.yaml</code> o registro desse novo microsservi\u00e7o:</p> docker-compose.yaml<pre><code>  auth:\n    build:\n      context: ../store.auth-resource/\n      dockerfile: Dockerfile\n    container_name: store-auth\n    image: store-auth:latest\n    # ports:\n    #   - 8080:8080\n    environment:\n      - eureka.client.service-url.defaultZone=http://store-discovery:8761/eureka/\n    deploy:\n      mode: replicated\n      replicas: 1\n    restart: always\n    networks:\n      - private-network\n    depends_on:\n      - discovery\n      - account\n</code></pre> NICE TO HAVE <p>O projeto da disciplina pode ter um microsservi\u00e7o de registro que valide email ou SMS para criar a conta.</p>"},{"location":"diagrama/microservices/diagrama/","title":"Diagrama","text":""},{"location":"diagrama/microservices/diagrama/#descricao-da-arquitetura-do-sistema-de-gerenciamento-de-jogadores-de-valorant","title":"Descri\u00e7\u00e3o da Arquitetura do Sistema de Gerenciamento de Jogadores de Valorant","text":"<p>Jogador: Esta classe representa os dados de um jogador, como seu identificador \u00fanico (id), nome de usu\u00e1rio (username), tag, tempo de jogo (playtime), entre outros atributos. \u00c9 uma entidade persistente no banco de dados.</p> <p>JogadorRepository: Esta \u00e9 uma interface que define opera\u00e7\u00f5es para acessar e manipular os dados dos jogadores no banco de dados. No diagrama, apenas uma opera\u00e7\u00e3o findWinPercentage() \u00e9 mostrada, que retorna uma lista de arrays de objetos contendo informa\u00e7\u00f5es sobre a porcentagem de vit\u00f3ria de cada jogador.</p> <p>JogadorRequestDTO: Esta classe representa um objeto de transfer\u00eancia de dados (DTO) usado para receber dados do cliente para criar ou atualizar um jogador. Cont\u00e9m os mesmos atributos que a classe Jogador, mas \u00e9 utilizada para comunica\u00e7\u00e3o com o cliente.</p> <p>JogadorController: Este \u00e9 um controlador que lida com requisi\u00e7\u00f5es HTTP relacionadas aos jogadores. Ele possui dois m\u00e9todos mapeados para as URLs /porcen-vitoria e /porcenVitAgent, indicados pelo annotation @GetMapping. Esses m\u00e9todos s\u00e3o respons\u00e1veis por receber requisi\u00e7\u00f5es do cliente e delegar o processamento para os componentes apropriados.</p> <p>JogadorResponeDTO: Similar ao JogadorRequestDTO, este \u00e9 um objeto de transfer\u00eancia de dados usado para enviar dados do servidor para o cliente em resposta a uma requisi\u00e7\u00e3o. Ele cont\u00e9m os mesmos atributos que a classe Jogador, mas \u00e9 utilizado para comunica\u00e7\u00e3o com o cliente.</p> <p>Exemplo de uso dessa abordagem no microsservi\u00e7o Jogadores:</p> <pre><code>classDiagram\n  class Jogador {\n    &lt;&lt;class&gt;&gt;\n    - Long id\n    - String username\n    - String tag\n    - String playtime\n    ...\n  }\n  class JogadorRepository {\n    &lt;&lt;interface&gt;&gt;\n    + List&lt;Object[]&gt; findWinPercentage()\n  }\n  class JogadorRequestDTO {\n    &lt;&lt;record&gt;&gt;\n    - Long id\n    - String username\n    - String tag\n    ...\n  }\n  class JogadorController {\n    + @GetMapping(\"/porcen-vitoria\")\n    + @GetMapping(\"/porcenVitAgent\")\n  }\n  class JogadorResponeDTO {\n    &lt;&lt;record&gt;&gt;\n    - Long id\n    - String username\n    - String tag\n  }\n\n  JogadorController &lt;|-- JogadorRepository\n  Jogador o-- JogadorRepository\n  Jogador o-- JogadorResponeDTO\n  Jogador o-- JogadorRequestDTO\n  Jogador o-- JogadorController\n</code></pre>"},{"location":"diagrama/microservices/diagrama/#interacao-entre-user-jogadorcontroller-e-jogadorrepository","title":"Intera\u00e7\u00e3o entre User, JogadorController, e JogadorRepository","text":"<p>O diagrama de sequ\u00eancia apresentado descreve a intera\u00e7\u00e3o entre os diferentes componentes de um sistema em dois cen\u00e1rios distintos. No primeiro cen\u00e1rio, o usu\u00e1rio acessa a porcentagem de vit\u00f3ria dos jogadores atrav\u00e9s do endpoint '/porcen-vitoria'. O controlador de jogador (JogadorController) recebe a solicita\u00e7\u00e3o e, em seguida, chama o m\u00e9todo findWinPercentage() no reposit\u00f3rio de jogador (JogadorRepository) para recuperar os dados da porcentagem de vit\u00f3ria. O reposit\u00f3rio executa a opera\u00e7\u00e3o e retorna os resultados ao controlador, que os formata e os retorna ao usu\u00e1rio. No segundo cen\u00e1rio, o usu\u00e1rio acessa a porcentagem de vit\u00f3ria do agente atrav\u00e9s do endpoint '/porcenVitAgent'.</p> <pre><code>sequenceDiagram\n  autonumber\n  Usuario-&gt;&gt;JogadorController: Acessar '/porcen-vitoria'\n  JogadorController-&gt;&gt;JogadorRepository: findWinPercentage()\n  JogadorRepository--&gt;&gt;JogadorController: Resultados\n  JogadorController--&gt;&gt;Usuario: Retornar resultados formatados\n\n  Usuario-&gt;&gt;JogadorController: Acessar '/porcenVitAgent'\n  JogadorController-&gt;&gt;JogadorRepository: porcenVitAgent()\n  JogadorRepository--&gt;&gt;JogadorController: Resultados\n  JogadorController--&gt;&gt;Usuario: Retornar resultados formatados</code></pre>"},{"location":"diagrama/microservices/diagrama/#o-processo-de-etl","title":"O Processo de ETL","text":"<p>A extra\u00e7\u00e3o de dados do site tracker.gg/valorant utilizando t\u00e9cnicas de web scraping para obter informa\u00e7\u00f5es relevantes, como estat\u00edsticas de jogadores e partidas, em formato CSV. Em seguida, esses dados s\u00e3o importados para um banco de dados PostgreSQL usando a estrutura Spring Boot, que simplifica o desenvolvimento de aplicativos Java e a integra\u00e7\u00e3o com bancos de dados. O projeto abrange diversas disciplinas, desde o desenvolvimento web at\u00e9 a ci\u00eancia de dados, e o fluxo de dados ocorre da web para o aplicativo Spring Boot e, por fim, para o banco de dados PostgreSQL.</p> <p></p>"},{"location":"diagrama/microservices/gateway/","title":"Gateway","text":"<p>O gateway tem como fun\u00e7\u00e3o ser o \u00fanico ponto de entrada de todo o sistema, ele \u00e9 respons\u00e1vel por redirecionar todas as requisi\u00e7\u00f5es aos respectivos microsservi\u00e7os. Assim bem como, de autorizar ou negar acesso ao sistema baseando-se no token de seguran\u00e7a passado pela requisi\u00e7\u00e3o.</p> <pre><code>flowchart LR\n  subgraph Client\n    direction LR\n    Web\n    Mobile\n    Desktop\n  end\n  subgraph Microservices\n    direction LR\n    gateway[\"Gateway\"]\n    subgraph Essentials\n      direction TB\n      discovery[\"Discovery\"]\n      auth[\"Auth\"]\n      config[\"Configuration\"]\n    end\n    subgraph Businesses\n      direction TB\n      ms1[\"Service 1\"]\n      ms2[\"Service 2\"]\n      ms3[\"Service 3\"]\n    end\n  end\n  Client --&gt; lb[\"Load Balance\"] --&gt; gateway --&gt; Businesses\n  gateway --&gt; auth\n  gateway --&gt; discovery</code></pre>"},{"location":"diagrama/microservices/gateway/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;Gateway: route(ServerHttpRequest)\n  Gateway-&gt;&gt;+AuthenticationFilter: filter(ServerWebExchange, GatewayFilterChain)\n  AuthenticationFilter-&gt;&gt;RouteValidator: isSecured.test(ServerHttpRequest)\n  RouteValidator--&gt;&gt;AuthenticationFilter: True | False\n  critical notSecured\n    AuthenticationFilter-&gt;&gt;Gateway: follow the flux\n  end\n  AuthenticationFilter-&gt;&gt;AuthenticationFilter: isAuthMissing(ServerHttpRequest)\n  critical isAuthMissing\n    AuthenticationFilter-&gt;&gt;User: unauthorized message\n  end\n  AuthenticationFilter-&gt;&gt;AuthenticationFilter: validateAuthorizationHeader()\n  critical isInvalidAuthorizationHeader\n    AuthenticationFilter-&gt;&gt;User: unauthorized message\n  end\n  AuthenticationFilter-&gt;&gt;Auth: solve(Token)\n  critical isInvalidToken\n    Auth-&gt;&gt;User: unauthorized message\n  end\n  Auth-&gt;&gt;AuthenticationFilter: returns token claims\n  AuthenticationFilter-&gt;&gt;AuthenticationFilter: updateRequestHeader(ServerHttpRequest)\n  AuthenticationFilter-&gt;&gt;Gateway: follow the flux</code></pre> pom.xml<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;!-- https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;com.github.ben-manes.caffeine&lt;/groupId&gt;\n  &lt;artifactId&gt;caffeine&lt;/artifactId&gt;\n  &lt;version&gt;3.1.8&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;insper.store&lt;/groupId&gt;\n  &lt;artifactId&gt;auth&lt;/artifactId&gt;\n  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> application.yaml<pre><code>spring:\n  application:\n    name: store-gateway\n  cloud:\n    discovery:\n      locator:\n        enabled: true\n    gateway:\n      routes:\n\n        - id: auth\n          uri: lb://store-auth\n          predicates:\n            - Path=/auth/**\n\n        # - id: product\n        #   uri: lb://store-product\n        #   predicates:\n        #     - Path=/product/**\n\n      default-filters:\n        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin\n      globalcors:\n        corsConfigurations:\n          '[/**]':\n            allowedOrigins: \"http://localhost\"\n            allowedHeaders: \"*\"\n            allowedMethods:\n            - GET\n            - POST\n\napi:\n  endpoints:\n    open: &gt;\n      POST /auth/register/,\n      POST /auth/login/\n</code></pre> GatewayConfiguration.java<pre><code>package insper.store.gateway;\n\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n@Configuration\npublic class GatewayConfiguration {\n\n    @Bean\n    @LoadBalanced\n    public WebClient.Builder webClient() {\n        return WebClient.builder();\n    }\n\n}\n</code></pre> RouterValidator.java<pre><code>package insper.store.gateway.security;\n\nimport java.util.List;\nimport java.util.function.Predicate;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class RouterValidator {\n\n        @Value(\"${api.endpoints.open}}\") \n        private List&lt;String&gt; openApiEndpoints;\n\n        public Predicate&lt;ServerHttpRequest&gt; isSecured =\n                request -&gt; openApiEndpoints\n                        .stream()\n                        .noneMatch(uri -&gt; {\n                                String[] parts = uri.replaceAll(\"[^a-zA-Z0-9// ]\", \"\").split(\" \");\n                                return request.getMethod().toString().equalsIgnoreCase(parts[0])\n                                    &amp;&amp; request.getURI().getPath().equals(parts[1]);\n                        });\n\n}\n</code></pre> AuthenticationFilter.java<pre><code>package insper.store.gateway.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.gateway.filter.GatewayFilterChain;\nimport org.springframework.cloud.gateway.filter.GlobalFilter;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.springframework.web.server.ServerWebExchange;\n\nimport reactor.core.publisher.Mono;\nimport store.auth.IdIn;\nimport store.auth.IdOut;\n\n@Component\npublic class AuthenticationFilter implements GlobalFilter {\n\n    private static final String HEADER_AUTHORIZATION = \"Authorization\";\n    private static final String HEADER_BEARER = \"Bearer\";\n\n    @Autowired\n    private RouterValidator routerValidator;\n\n    @Autowired\n    private WebClient.Builder webClient;\n\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n        if (!routerValidator.isSecured.test(request)) {\n            return chain.filter(exchange);\n        }\n        if (!isAuthMissing(request)) {\n            final String[] parts = this.getAuthHeader(request).split(\" \");\n            if (parts.length != 2 || !parts[0].equals(HEADER_BEARER)) {\n                throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Authorization header format must be Bearer {token}\");\n            }\n            final String token = parts[1];\n            return webClient\n                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\n                .build()\n                .post()\n                .uri(\"http://store-auth/auth/token/\")\n                .bodyValue(new IdIn(token))\n                .retrieve()\n                .toEntity(IdOut.class)\n                .flatMap(response -&gt; {\n                    if (response != null &amp;&amp; response.getBody() != null) {\n                        this.updateRequest(exchange, response.getBody().id());\n                        return chain.filter(exchange);\n                    } else {\n                        throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Invalid token\");\n                    }\n                });\n        }\n        throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Missing authorization header\");\n    }\n\n    private String getAuthHeader(ServerHttpRequest request) {\n        return request.getHeaders().getOrEmpty(HEADER_AUTHORIZATION).get(0);\n    }\n\n    private boolean isAuthMissing(ServerHttpRequest request) {\n        return !request.getHeaders().containsKey(\"Authorization\");\n    }    \n\n    private void updateRequest(ServerWebExchange exchange, String id) {\n        exchange.getRequest().mutate()\n                .header(\"id-user\", id)\n                .build();\n    }\n\n}\n</code></pre>"},{"location":"diagrama/microservices/jogadores/","title":"Jogadores","text":"<p>Esse microservi\u00e7o \u00e9 respons\u00e1vel por gerenciar as contas dos usu\u00e1rios do sistema que est\u00e1 sendo desenvolvido. Ele tamb\u00e9m pode ser utilizado como template para o desenvolvimento de outros microservi\u00e7os que se utilizem de recuros semelhantes em seu funcionamento.</p> <ol> <li>Endpoints</li> </ol>"},{"location":"diagrama/microservices/jogadores/#endpoints","title":"Endpoints","text":"Create Account <pre><code>POST /accounts\n</code></pre> <p>Request <pre><code>{\n    \"username\": \"Alek\",\n    \"tag\": \"#top1\",\n    \"playtime\": \"300\"\n    ...\n}\n</code></pre> Response</p> code body 201 <code>{ \"id\": \"1\", \"username\": \"Alek\", \"tag\": \"#top1\" }</code> 401 Get Account <p><pre><code>GET /porcen-vitoria/{uuid}\n</code></pre> Response</p> code body 200 <code>{\"id\": \"1\", \"username\": \"Alek\", \"matches\": \"250\", \"winPercentage\": \"42%\" }</code> 401"}]}